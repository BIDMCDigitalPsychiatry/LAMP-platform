"use strict";(self.webpackChunkLAMP_documentation=self.webpackChunkLAMP_documentation||[]).push([[1358],{603905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},103296:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return s}});var r=n(487462),a=n(263366),i=(n(667294),n(603905)),o=["components"],l={},c="Running Cortex",u={unversionedId:"data_science/cortex/running_cortex",id:"data_science/cortex/running_cortex",title:"Running Cortex",description:"The cortex.run() function is the easiest way to run multiple cortex features on multiple participants in a single function call.",source:"@site/docs/09-data_science/06-cortex/03-running_cortex.md",sourceDirName:"09-data_science/06-cortex",slug:"/data_science/cortex/running_cortex",permalink:"/data_science/cortex/running_cortex",editUrl:"https://github.com/BIDMCDigitalPsychiatry/LAMP-platform/edit/master/docs/09-data_science/06-cortex/03-running_cortex.md",tags:[],version:"current",lastUpdatedBy:"dcurrey88",lastUpdatedAt:1649876774,formattedLastUpdatedAt:"4/13/2022",sidebarPosition:3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"What is Cortex?",permalink:"/data_science/cortex/what_is_cortex"},next:{title:"Advanced Usage",permalink:"/data_science/cortex/advanced"}},s=[{value:"Optional or required kwargs",id:"optional-or-required-kwargs",children:[],level:4},{value:"Data",id:"data",children:[],level:4},{value:"Example",id:"example",children:[],level:4}],p={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"running-cortex"},"Running Cortex"),(0,i.kt)("p",null,"The cortex.run() function is the easiest way to run multiple cortex features on multiple participants in a single function call."),(0,i.kt)("h4",{id:"optional-or-required-kwargs"},"Optional or required kwargs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id_or_set"),": (list of strings) a list of researchers, studies, and participants that will be expanded into a list of all participants in the set."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"features"),": (list of strings) a list of the names of raw, primary, or secondary features to run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"feature_params"),": (dict, default={}) a dictionary holding any other parameters to pass to the feature functions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start"),": (int, units: ms, default=None) the start time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end"),": (int, units: ms, default=None) the end time.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Note: If start or end is set to None, the first / last timestamp with raw data will be determined. If resolution is additionally set to the number of miliseconds in a day then these timestamps will be shifted to 9am UTC."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resolution"),": (int, units: ms, default: 1 day = 86400000 ms) the resolution over which to compute features."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path_to_save"),': (string, default: "") a filepath to a directory for the features. Folders will be created for each feature and participant data will be saved in individual pickle files.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"run_part_and_features"),': (string, default: "") a path to a csv file with "participant" and "feature" columns to run only certain features for certain participants.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cache"),": (boolean, default: False) whether or not to cache the raw data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"print_logs"),": (boolean, default: False) whether to print logs. Otherwise the log level will be set to warning.")),(0,i.kt)("h4",{id:"data"},"Data"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_save"),' is not set, a dictionary with keys for each feature will be created. Each feature will have a datafream with columns "id" for the participant id, and then any parameters in the data.'),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"cortex.run(id=\"dhfiej29384\",\n           features=['screen_duration', 'data_quality'],\n           feature_params={'screen_duration': {}, 'data_quality': {\"feature\":\"gps\", \"bin_size\":3600000}},\n           start=1638248400000,\n           end=1638248400000 + 7 * MS_IN_DAY)\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"{'screen_duration':             id           timestamp       value\n 0  U7869554142 2021-11-30 05:00:00  25588172.0\n 1  U7869554142 2021-12-01 05:00:00  15561390.0\n 2  U7869554142 2021-12-02 05:00:00  25896531.0\n 3  U7869554142 2021-12-03 05:00:00  33756622.0\n 4  U7869554142 2021-12-04 05:00:00  16850746.0\n 5  U7869554142 2021-12-05 05:00:00  19710799.0\n 0  U1949510612 2021-11-30 05:00:00         0.0\n 1  U1949510612 2021-12-01 05:00:00    184235.0\n 2  U1949510612 2021-12-02 05:00:00         0.0\n 3  U1949510612 2021-12-03 05:00:00  15452842.0\n 4  U1949510612 2021-12-04 05:00:00  13476068.0\n 5  U1949510612 2021-12-05 05:00:00  31316368.0,\n 'data_quality':             id           timestamp     value\n 0  U7869554142 2021-11-30 05:00:00  0.791667\n 1  U7869554142 2021-12-01 05:00:00  0.958333\n 2  U7869554142 2021-12-02 05:00:00  0.916667\n 3  U7869554142 2021-12-03 05:00:00  1.000000\n 4  U7869554142 2021-12-04 05:00:00  0.958333\n 5  U7869554142 2021-12-05 05:00:00  0.708333\n 0  U1949510612 2021-11-30 05:00:00  0.041667\n 1  U1949510612 2021-12-01 05:00:00  0.041667\n 2  U1949510612 2021-12-02 05:00:00  0.000000\n 3  U1949510612 2021-12-03 05:00:00  0.416667\n 4  U1949510612 2021-12-04 05:00:00  0.750000\n 5  U1949510612 2021-12-05 05:00:00  1.000000}\n")))}d.isMDXComponent=!0}}]);