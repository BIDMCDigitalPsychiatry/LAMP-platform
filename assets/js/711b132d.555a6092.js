(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{211:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return m}));var a=n(3),r=n(8),o=(n(0),n(375)),s=["components"],i={},c={unversionedId:"deploy/aws",id:"deploy/aws",isDocsHomePage:!1,title:"Preparing Resources on AWS",description:"The following instructions will result in a Docker Swarm setup prepared to deploy LAMP. You will need to continue following the instructions after this phase to successfully configure LAMP.",source:"@site/docs/06-deploy/05-aws.md",sourceDirName:"06-deploy",slug:"/deploy/aws",permalink:"/deploy/aws",editUrl:"https://github.com/BIDMCDigitalPsychiatry/LAMP-platform/edit/master/docs/06-deploy/05-aws.md",version:"current",lastUpdatedBy:"jtorous",lastUpdatedAt:1629589847,formattedLastUpdatedAt:"8/21/2021",sidebarPosition:5,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Provisioning the LAMP Platform",permalink:"/deploy/provisioning"},next:{title:"Deploying via CloudFormation",permalink:"/deploy/cloudformation"}},l=[{value:"For EC2 Instances Only:",id:"for-ec2-instances-only",children:[]},{value:"EC2 Commands",id:"ec2-commands",children:[]},{value:"AWS SSM Instructions",id:"aws-ssm-instructions",children:[]}],u={toc:l};function m(e){var t=e.components,i=Object(r.a)(e,s);return Object(o.b)("wrapper",Object(a.a)({},u,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The following instructions will result in a Docker Swarm setup prepared to deploy LAMP. You will need to continue following the instructions after this phase to successfully configure LAMP."),Object(o.b)("p",null,Object(o.b)("img",{src:n(6146).default})),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Digital Psychiatry's AWS Network Diagram for the LAMP Platform")),Object(o.b)("h3",{id:"for-ec2-instances-only"},"For EC2 Instances Only:"),Object(o.b)("p",null,"A ",Object(o.b)("strong",{parentName:"p"},"HARD")," requirement for the successful operation of the LAMP Platform is the use of a high performance SSD volume. For more information on these hard limitations and requirements, ",Object(o.b)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/administration/production-notes/"},"see the MongoDB documentation here.")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Required maximum (saturable) disk bandwidth: ",Object(o.b)("inlineCode",{parentName:"li"},"4750 Mbps")),Object(o.b)("li",{parentName:"ol"},"Required maximum disk throughput: ",Object(o.b)("inlineCode",{parentName:"li"},"593.75 MB/s")),Object(o.b)("li",{parentName:"ol"},"Required maximum disk I/O operations: ",Object(o.b)("inlineCode",{parentName:"li"},"20000 IOPS")),Object(o.b)("li",{parentName:"ol"},"Required minimum disk throughput: ",Object(o.b)("inlineCode",{parentName:"li"},"125 MB/s")),Object(o.b)("li",{parentName:"ol"},"Required minimum disk I/O operations: ",Object(o.b)("inlineCode",{parentName:"li"},"3000 IOPS")),Object(o.b)("li",{parentName:"ol"},"Required minimum disk space: ",Object(o.b)("inlineCode",{parentName:"li"},"64 GB"))),Object(o.b)("p",null,"If using AWS, provisioning a DocumentDB cluster is the simplest way to achieve these baseline requirements for efficient and accurate data collection with no database outages or upload rejections. "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"You must replace the value of ",Object(o.b)("inlineCode",{parentName:"strong"},"MY_DNS_NAME")," in the commands below.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-markdown"},' 1. Create an EC2 instance.\n                -> AMI: AWS Linux 2\n                -> Instance Type: [MINIMUM] t2.medium\n                -> Create a new IAM role with the `AmazonSSMManagedInstanceCore` policy.\n                -> Enable termination protection.\n                -> Create a [RECOMMENDED] 1TB EBS volume WITH encryption enabled.\n                -> Configure security group:\n                        -> HTTP: TCP 80 from anywhere\n                        -> HTTPS: TCP 443 from anywhere\n                        -> Docker Daemon: TCP 2375 from this Security Group\n                        -> Docker Machine: TCP 2376 from this Security Group\n                        -> Docker Swarm: TCP 2377 from this Security Group\n                        -> Docker Swarm: TCP 7946 from this Security Group\n                        -> Docker Swarm: UDP 7946 from this Security Group\n                        -> Docker Overlay: UDP 4789 from this Security Group\n                -> Create a new key pair and keep it private.\n                -> Allocate and assign an elastic IP to the instance.\n 2. Run the following commands in the instance.\n                sudo yum -y update && sudo yum -y install docker -y\n                sudo usermod -a -G docker ec2-user\n                sudo hostnamectl set-hostname <MY_DNS_NAME>\n                sudo printf "[Service]\\nExecStart=\\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\\n" | sudo tee /etc/systemd/system/docker.service.d/override.conf\n                sudo systemctl daemon-reload && sudo service docker restart\n                sudo docker swarm init\n 3. Create your DNS binding in Route53.\n')),Object(o.b)("h3",{id:"ec2-commands"},"EC2 Commands"),Object(o.b)("p",null,"The following is a set of bash commands to be used from within AWS Systems Manager once a new EC2 instance and EBS volume are created with the AWS SSM IAM role."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"DO NOT USE THIS AS A SCRIPT!\nTHOROUGHLY READ IT AND RUN EACH COMMAND INDIVIDUALLY!\nSUBSTITUTE ALL VARIABLES BEFORE CONTINUING!")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},'# Assumes nvme1n1 is the name of the EBS volume. \n# Use lsblk to confirm this before running the script.\n\n# Attach EBS volume and configure auto-reattach on restart.\nmkfs -t xfs /dev/nvme1n1\nmkdir /data && mount /dev/nvme1n1 /data\nprintf "\\nUUID=$(blkid -s UUID -o value /dev/nvme1n1)     /data       xfs    defaults,nofail   0   2" >> /etc/fstab\numount /data && mount -a\n\n# Install Docker and move Docker root to EBS volume.\nyum install docker\nmkdir -p /data/var/lib/docker && ln -s /data/var/lib/docker /var/lib/docker\n\n# Set hostname before starting Docker and join the Swarm.\nhostnamectl set-hostname node-01.example.com\nservice docker start\ndocker swarm join --token SWARM_TOKEN IP_ADDR:2377\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"In case your EBS volume runs out of storage space, follow the instructions below:")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"# expand the EBS volume using the AWS management console first\nlsblk\ngrowpart /dev/nvme1n1 1\nxfs_growfs -d /data\n")),Object(o.b)("h3",{id:"aws-ssm-instructions"},"AWS SSM Instructions"),Object(o.b)("p",null,"We recommend disabling all SSH (port 22) or remote access to any EC2 instances you configure. ",Object(o.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html#start-ec2-console"},"Use AWS Systems Session Manager (AWS SSM) to access your node.")," Additionally, follow the instructions below on your local computer to securely communicate with the instance(s)."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"},"Install the AWS CLI SSM plugin."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-enable-ssh-connections.html"},"Configure SSH to support AWS SSM tunneling."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Alternatively, manually open a port forwarding tunnel."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},'aws ssm start-session \\\n    --target $(aws ec2 describe-instances \\\n        --filter "Name=tag:Name,Values=node-01" \\\n        --query "Reservations[].Instances[?State.Name == \'running\'].InstanceId[]" \\\n        --output text) \\\n    --document-name AWS-StartPortForwardingSession \\\n    --parameters \'{ "portNumber": ["22"], "localPortNumber": ["9999"] }\'\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Alternatively, manually open a secure SSH tunnel session."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"aws ssm start-session \\\n    --target $(aws ec2 describe-instances \\\n        --filter \"Name=tag:Name,Values=node-01\" \\\n        --query \"Reservations[].Instances[?State.Name == 'running'].InstanceId[]\" \\\n        --output text) \\\n    --document-name AWS-StartSSHSession \\\n    --parameters 'portNumber=%p'\n")))))}m.isMDXComponent=!0},375:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?r.a.createElement(b,i(i({ref:t},l),{},{components:n})):r.a.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6146:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/Untitled_AWS-254a3f4cb9e9716d707ff407b7ca3969.png"}}]);