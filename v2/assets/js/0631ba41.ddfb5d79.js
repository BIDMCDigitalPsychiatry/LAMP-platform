"use strict";(self.webpackChunklamp_platform=self.webpackChunklamp_platform||[]).push([[3255],{17395:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>n,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"type":"api","id":"set-a-tag-for-a-researcher-study-participant-activity-or-sensor-or-its-childen","title":"Set a Tag for a Researcher, Study, Participant, Activity, or Sensor, or its childen.","description":"","slug":"/set-a-tag-for-a-researcher-study-participant-activity-or-sensor-or-its-childen","frontMatter":{},"api":{"operationId":"Tag.set","description":"`Tag`s act as a hierarchical key-value store localized to each Resource. That is to say, `Participant` A has a completely different key-value store instance than `Participant` B or `Activity` X. Furthermore, the resource  hierarchy also influences the contents of the key-value store. If a `Researcher` sets a `Tag` \\"hello.testing\\" on `Participant` A with the contents `\\"hello world\\"`, then `Participant` A will be able to query their tags and see \\"hello.testing\\" exists, even though it was not created _by_ `Participant` A. The side-effect of this feature is  called \\"tag masking\\": should `Participant` A now attempt to create \\"hello.testing\\" with the contents `\\"bye world\\"`, this `Tag` _will be successfully saved_, but masked during retrieval by the version created by the `Researcher`.\\n\\nThere are four `target` types that act as a selector for _which_ key-value store will be manipulated. \\n1. `\\"me\\"`: Implicit self; Automatically substitute the `id` parameter as the `target`. See (2) for semantics.\\n2. `id`: Explicit self. Manually specify the `id` parameter as the `target`. This selects the key-value store   corresponding to the resource itself.\\n3. `{type}`: Implicit child. This should be one of \\"Researcher\\", \\"Study\\", \\"Participant\\", \\"Activity\\", or \\"Sensor\\".  This selects the key-value store that spans __all children resources of that resource type__!! For example, a  `Researcher` may create a `Tag` targetting `Participant` (all `Participant` children of all `Study` children of  the `Researcher` resource itself), such that the `Tag` applies to __ANY__ child `Participant`.\\n4. `{id}`: Explicit child. This should be a specific child resource ID, and selects the key-value store of that  specific child resource ONLY. \\n\\nIn most cases, either (1) or (2) are what you will want to use, as these select self\'s specific key-value store.  There are, however, a few cases for (3) and (4). For example, if a study needs to manage delivered gift card codes, using (1)/(2) would be problematic, as this inadvertently allows the `Participant`s to modify the delivered codes.\\n\\nThe deprecated name for this operation is `Type.set_attachment`.\\n","tags":["Tag"],"parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string"},"description":"The `id` of the Resource (`Researcher`, `Study`, `Participant`, `Activity`, or `Sensor`) to create or update a `Tag`.  The special case `\\"me\\"` parameter can also be used to implicitly refer to the Resource ID of the currently authenticated user (Credential).\\n"},{"name":"key","in":"path","required":true,"schema":{"type":"string"},"description":"The `key` of the `Tag` in reverse-DNS format (i.e. `org.digitalpsych.college_study.demographics`). This must be unique per key-value combination, otherwise the corresponding `value` will be overwritten (if the `Tag` does not already exist). The prefixes \\"lamp.\\" and \\"digital.lamp.\\" are reserved for internal use only.\\n"},{"name":"target","in":"path","required":true,"schema":{"type":"string"},"description":"The `target` selector for the specific key-value store. (See description above.)"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"nullable":true}}}},"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"type":"object","properties":{"data":{"nullable":true}}}}}},"default":{"description":"Error","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string","example":"400.bad-request"}}}}}}},"security":[{"Authorization":[]}],"x-code-samples":[{"lang":"js","label":"JavaScript","source":"import LAMP from \'lamp-core\'\\nawait LAMP.connect({ serverAddress: \\"api.lamp.digital\\", accessKey: \\"email@address.com\\", secretKey: \\"password\\" })\\n// function-specific sample code here\\n"},{"lang":"python","label":"Python","source":"import LAMP\\nLAMP.connect(\\"api.lamp.digital\\", \\"email@address.com\\", \\"password\\")\\n# function-specific sample code here\\n"},{"lang":"go","label":"R Script","source":"library(LAMP)\\nLAMP.connect(\\"api.lamp.digital\\", \\"email@address.com\\", \\"password\\")\\n# function-specific sample code here\\n"}],"method":"put","path":"/type/{id}/tag/{key}/{target}","servers":[{"url":"https://{server_url}","description":"LAMP Platform API Server","variables":{"server_url":{"default":"api.lamp.digital","description":"A specific API server instance (HTTPS required)."}}}],"securitySchemes":{"Authorization":{"type":"http","scheme":"basic"}},"info":{"title":"LAMP Platform","version":"1.0.0","description":"See docs.lamp.digital for more.","contact":{"url":"https://digitalpsych.org/","email":"team@digitalpsych.org","name":"Division of Digital Psychiatry at the Beth Israel Deaconess Medical Center."}},"postman":{"name":"Set a Tag for a Researcher, Study, Participant, Activity, or Sensor, or its childen.","description":{"content":"`Tag`s act as a hierarchical key-value store localized to each Resource. That is to say, `Participant` A has a completely different key-value store instance than `Participant` B or `Activity` X. Furthermore, the resource  hierarchy also influences the contents of the key-value store. If a `Researcher` sets a `Tag` \\"hello.testing\\" on `Participant` A with the contents `\\"hello world\\"`, then `Participant` A will be able to query their tags and see \\"hello.testing\\" exists, even though it was not created _by_ `Participant` A. The side-effect of this feature is  called \\"tag masking\\": should `Participant` A now attempt to create \\"hello.testing\\" with the contents `\\"bye world\\"`, this `Tag` _will be successfully saved_, but masked during retrieval by the version created by the `Researcher`.\\n\\nThere are four `target` types that act as a selector for _which_ key-value store will be manipulated. \\n1. `\\"me\\"`: Implicit self; Automatically substitute the `id` parameter as the `target`. See (2) for semantics.\\n2. `id`: Explicit self. Manually specify the `id` parameter as the `target`. This selects the key-value store   corresponding to the resource itself.\\n3. `{type}`: Implicit child. This should be one of \\"Researcher\\", \\"Study\\", \\"Participant\\", \\"Activity\\", or \\"Sensor\\".  This selects the key-value store that spans __all children resources of that resource type__!! For example, a  `Researcher` may create a `Tag` targetting `Participant` (all `Participant` children of all `Study` children of  the `Researcher` resource itself), such that the `Tag` applies to __ANY__ child `Participant`.\\n4. `{id}`: Explicit child. This should be a specific child resource ID, and selects the key-value store of that  specific child resource ONLY. \\n\\nIn most cases, either (1) or (2) are what you will want to use, as these select self\'s specific key-value store.  There are, however, a few cases for (3) and (4). For example, if a study needs to manage delivered gift card codes, using (1)/(2) would be problematic, as this inadvertently allows the `Participant`s to modify the delivered codes.\\n\\nThe deprecated name for this operation is `Type.set_attachment`.\\n","type":"text/plain"},"url":{"path":["type",":id","tag",":key",":target"],"host":["{{baseUrl}}"],"query":[],"variable":[{"disabled":false,"description":{"content":"(Required) The `id` of the Resource (`Researcher`, `Study`, `Participant`, `Activity`, or `Sensor`) to create or update a `Tag`.  The special case `\\"me\\"` parameter can also be used to implicitly refer to the Resource ID of the currently authenticated user (Credential).\\n","type":"text/plain"},"type":"any","value":"<string>","key":"id"},{"disabled":false,"description":{"content":"(Required) The `key` of the `Tag` in reverse-DNS format (i.e. `org.digitalpsych.college_study.demographics`). This must be unique per key-value combination, otherwise the corresponding `value` will be overwritten (if the `Tag` does not already exist). The prefixes \\"lamp.\\" and \\"digital.lamp.\\" are reserved for internal use only.\\n","type":"text/plain"},"type":"any","value":"<string>","key":"key"},{"disabled":false,"description":{"content":"(Required) The `target` selector for the specific key-value store. (See description above.)","type":"text/plain"},"type":"any","value":"<string>","key":"target"}]},"header":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"method":"PUT","body":{"mode":"raw","raw":"{}","options":{"raw":{"language":"json"}}},"auth":{"type":"basic","basic":[{"type":"any","value":"{{basicAuthUsername}}","key":"username"},{"type":"any","value":"{{basicAuthPassword}}","key":"password"}]}}},"source":"@site/LAMP-protocol/openapi.yml","sourceDirName":".","permalink":"/v2/api/set-a-tag-for-a-researcher-study-participant-activity-or-sensor-or-its-childen","previous":{"title":"Get a Tag set for or by a Researcher, Study, Participant, Activity, or Sensor.","permalink":"/v2/api/get-a-tag-set-for-or-by-a-researcher-study-participant-activity-or-sensor"},"next":{"title":"List all Credentials for a Resource.","permalink":"/v2/api/list-all-credentials-for-a-resource"}}');var s=i(74848),a=i(28453);const c={},n="Set a Tag for a Researcher, Study, Participant, Activity, or Sensor, or its childen.",l=[];function o(e){const t={code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"set-a-tag-for-a-researcher-study-participant-activity-or-sensor-or-its-childen",children:"Set a Tag for a Researcher, Study, Participant, Activity, or Sensor, or its childen."})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Tag"}),"s act as a hierarchical key-value store localized to each Resource. That is to say, ",(0,s.jsx)(t.code,{children:"Participant"})," A has a completely different key-value store instance than ",(0,s.jsx)(t.code,{children:"Participant"})," B or ",(0,s.jsx)(t.code,{children:"Activity"})," X. Furthermore, the resource  hierarchy also influences the contents of the key-value store. If a ",(0,s.jsx)(t.code,{children:"Researcher"})," sets a ",(0,s.jsx)(t.code,{children:"Tag"}),' "hello.testing" on ',(0,s.jsx)(t.code,{children:"Participant"})," A with the contents ",(0,s.jsx)(t.code,{children:'"hello world"'}),", then ",(0,s.jsx)(t.code,{children:"Participant"}),' A will be able to query their tags and see "hello.testing" exists, even though it was not created ',(0,s.jsx)(t.em,{children:"by"})," ",(0,s.jsx)(t.code,{children:"Participant"}),' A. The side-effect of this feature is  called "tag masking": should ',(0,s.jsx)(t.code,{children:"Participant"}),' A now attempt to create "hello.testing" with the contents ',(0,s.jsx)(t.code,{children:'"bye world"'}),", this ",(0,s.jsx)(t.code,{children:"Tag"})," ",(0,s.jsx)(t.em,{children:"will be successfully saved"}),", but masked during retrieval by the version created by the ",(0,s.jsx)(t.code,{children:"Researcher"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["There are four ",(0,s.jsx)(t.code,{children:"target"})," types that act as a selector for ",(0,s.jsx)(t.em,{children:"which"})," key-value store will be manipulated."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:'"me"'}),": Implicit self; Automatically substitute the ",(0,s.jsx)(t.code,{children:"id"})," parameter as the ",(0,s.jsx)(t.code,{children:"target"}),". See (2) for semantics."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"id"}),": Explicit self. Manually specify the ",(0,s.jsx)(t.code,{children:"id"})," parameter as the ",(0,s.jsx)(t.code,{children:"target"}),". This selects the key-value store   corresponding to the resource itself."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"{type}"}),': Implicit child. This should be one of "Researcher", "Study", "Participant", "Activity", or "Sensor".  This selects the key-value store that spans ',(0,s.jsx)(t.strong,{children:"all children resources of that resource type"}),"!! For example, a  ",(0,s.jsx)(t.code,{children:"Researcher"})," may create a ",(0,s.jsx)(t.code,{children:"Tag"})," targetting ",(0,s.jsx)(t.code,{children:"Participant"})," (all ",(0,s.jsx)(t.code,{children:"Participant"})," children of all ",(0,s.jsx)(t.code,{children:"Study"})," children of  the ",(0,s.jsx)(t.code,{children:"Researcher"})," resource itself), such that the ",(0,s.jsx)(t.code,{children:"Tag"})," applies to ",(0,s.jsx)(t.strong,{children:"ANY"})," child ",(0,s.jsx)(t.code,{children:"Participant"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"{id}"}),": Explicit child. This should be a specific child resource ID, and selects the key-value store of that  specific child resource ONLY."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In most cases, either (1) or (2) are what you will want to use, as these select self's specific key-value store.  There are, however, a few cases for (3) and (4). For example, if a study needs to manage delivered gift card codes, using (1)/(2) would be problematic, as this inadvertently allows the ",(0,s.jsx)(t.code,{children:"Participant"}),"s to modify the delivered codes."]}),"\n",(0,s.jsxs)(t.p,{children:["The deprecated name for this operation is ",(0,s.jsx)(t.code,{children:"Type.set_attachment"}),"."]}),"\n",(0,s.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,s.jsx)("thead",{children:(0,s.jsx)("tr",{children:(0,s.jsx)("th",{style:{textAlign:"left"},children:"Path Parameters"})})}),(0,s.jsxs)("tbody",{children:[(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"id"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,s.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"id"})," of the Resource (",(0,s.jsx)(t.code,{children:"Researcher"}),", ",(0,s.jsx)(t.code,{children:"Study"}),", ",(0,s.jsx)(t.code,{children:"Participant"}),", ",(0,s.jsx)(t.code,{children:"Activity"}),", or ",(0,s.jsx)(t.code,{children:"Sensor"}),") to create or update a ",(0,s.jsx)(t.code,{children:"Tag"}),".  The special case ",(0,s.jsx)(t.code,{children:'"me"'})," parameter can also be used to implicitly refer to the Resource ID of the currently authenticated user (Credential)."]})})]})}),(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"key"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,s.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"key"})," of the ",(0,s.jsx)(t.code,{children:"Tag"})," in reverse-DNS format (i.e. ",(0,s.jsx)(t.code,{children:"org.digitalpsych.college_study.demographics"}),"). This must be unique per key-value combination, otherwise the corresponding ",(0,s.jsx)(t.code,{children:"value"})," will be overwritten (if the ",(0,s.jsx)(t.code,{children:"Tag"}),' does not already exist). The prefixes "lamp." and "digital.lamp." are reserved for internal use only.']})})]})}),(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"target"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,s.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"target"})," selector for the specific key-value store. (See description above.)"]})})]})})]})]}),"\n",(0,s.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,s.jsx)("thead",{children:(0,s.jsx)("tr",{children:(0,s.jsxs)("th",{style:{textAlign:"left"},children:[(0,s.jsx)("span",{children:"Request Body "}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,s.jsx)("div",{})]})})}),(0,s.jsx)("tbody",{children:(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:(0,s.jsx)("span",{style:{opacity:"0.6"},children:" undefined"})})})})]}),"\n",(0,s.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,s.jsx)("thead",{children:(0,s.jsx)("tr",{children:(0,s.jsx)("th",{style:{textAlign:"left"},children:"Responses"})})}),(0,s.jsxs)("tbody",{children:[(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsxs)("div",{style:{display:"flex"},children:[(0,s.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,s.jsx)("code",{children:"200"})}),(0,s.jsx)("div",{children:(0,s.jsx)(t.p,{children:"Success"})})]}),(0,s.jsx)("div",{children:(0,s.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,s.jsx)("thead",{children:(0,s.jsx)("tr",{children:(0,s.jsxs)("th",{style:{textAlign:"left"},children:[(0,s.jsx)("span",{children:"Schema "}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,s.jsx)("div",{})]})})}),(0,s.jsx)("tbody",{children:(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"data"}),(0,s.jsx)("span",{style:{opacity:"0.6"}}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"})]})})})]})})]})}),(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsxs)("div",{style:{display:"flex"},children:[(0,s.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,s.jsx)("code",{children:"default"})}),(0,s.jsx)("div",{children:(0,s.jsx)(t.p,{children:"Error"})})]}),(0,s.jsx)("div",{children:(0,s.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,s.jsx)("thead",{children:(0,s.jsx)("tr",{children:(0,s.jsxs)("th",{style:{textAlign:"left"},children:[(0,s.jsx)("span",{children:"Schema "}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,s.jsx)("div",{})]})})}),(0,s.jsx)("tbody",{children:(0,s.jsx)("tr",{children:(0,s.jsxs)("td",{children:[(0,s.jsx)("code",{children:"error"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,s.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,s.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"})]})})})]})})]})})]})]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>n});var r=i(96540);const s={},a=r.createContext(s);function c(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);